#!/usr/bin/env bash
set -Eeuo pipefail
IFS=$'\n\t'
#trap cleanup SIGINT SIGTERM ERR EXIT
# https://github.com/lhunath/scripts/blob/66c734c96ff745b43daf89ddc81cdbcded881df7/bashlib/bashlib
# source .version.env
declare -a args
args=("$@")
script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

function msg() {
  echo >&2 -e "${1-}"
}

function help() { ## show this help	 db-exists)
  msg "Usage: xq  action [arg]*" 
	cat "${BASH_SOURCE[0]}" |  
  grep -oP '[a-z-]+[)]{1}([ ]+)?[#]{2}(.+)$' |
  awk 'BEGIN {FS = ").*?## "}; {printf "\033[36m%-10s\033[0m %s\n", $1, $2}'
  exit
}

# check required arguments
[[ ${#args[@]} -eq 0 ]] && help

function cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
  # script cleanup here
}

function ok (){
  echo -n "✔  " && echo -n $1
}

function die() {
  local msg=$(echo -n "✘  " && echo -n $1)
  local code=${2-1} # default exit status 1
  msg "$msg"
  exit "$code"
}

function dbDomainExists() {
  local resource="http://$(echo $1 | grep -oP '^(http://)?\K(.+)$')"
 docker exec xq xqerl escript bin/scripts/call.escript \
    "xqldb_db_server"  "exists" "$resource"
 #docker exec xq xqerl escript bin/scripts/call.escript "xqldb_lib"  "filename_to_uri" "/tmp/markup.nz"
  }

function dbItemType() {
  docker exec xq xqerl escript bin/scripts/run.escript \
    db-item-type.xq \
    $1
  }

function dbGetItem() {
  local resource="http://$(echo $1 | grep -oP '^(http://)?\K(.+)$')"
  local itemType=$(dbItemType $resource)
  case "$itemType" in
    document-node)
      docker exec xq xqerl escript bin/scripts/query.escript "'$resource' => doc() => serialize(map{'omit-xml-declaration': true() })"
      ;;
    array)
     docker exec xq xqerl escript bin/scripts/query.escript \
        "'$resource' => db:get() => serialize(map{'method': 'json' })" | jq '.'
      ;;
    map)
      docker exec xq xqerl escript bin/scripts/query.escript \
        "'$resource' => db:get() => serialize(map{'method': 'json' })" | jq '.'
      ;;
    *)
      die "[ $itemType ] unknown XDM item"
  esac
}

function dbList() {
  local resource="http://$(echo $1 | grep -oP '^(http://)?\K(.+)$')"
  docker exec xq xqerl escript bin/scripts/query.escript \
    "try { ('$resource' => uri-collection()) => string-join('&#10;') } catch * {()}" 
}

function doCall() {
  docker exec xq xqerl escript bin/scripts/call.escript \
    "$1" "$2" "$3"
  }

function isDocAvailable() {
  docker exec xq xqerl escript bin/scripts/query.escript \
  "'$1' => doc-available() => string()"
}

function getDoc() {
  docker exec xq xqerl escript bin/scripts/query.escript \
    "'$1' => doc() => serialize(map{'omit-xml-declaration': true() })"
}

function dbFilePut() {
  local base="$(echo $1 | grep -oP '^(src/data/)?\K(.+)$')"
  local srcFile="src/data/$base"
  [ -e $srcFile ] || die "[ $srcFile ] unknown file"
  local xqFile="/tmp/$base"
  docker exec xq ls -al $xqFile &>/dev/null || die "[ $xqFile ] not in running instance, check bind mount"
  local filename=$(basename -- "$srcFile")
  local extension="${filename##*.}"
  #local filename="${filename%.*}"
  # echo $1 | grep -oP '/data/' &>/dev/null || die "[ ${args[1]} ] unknown directory"
  #local target="${1##*/data/}" 
  case "$extension" in
    svg)
    docker exec xq xqerl escript bin/scripts/run.escript \
      put-item.xq \
      $base
      ;; 
    xml)
    docker exec xq xqerl escript bin/scripts/run.escript \
      put-item.xq \
      $base
      ;; 
    json)
      # json stored as XDM map or array
      docker exec xq xqerl escript bin/scripts/run.escript \
      put-item.xq \
      $1
      ;;
     csv)
      # json stored as XDM map or array
      docker exec xq xqerl escript bin/scripts/run.escript \
      put-item.xq \
      $1
      ;;
   md)
      local target="${1##*/data/}"
      local dir=$(dirname $target)
      local domain=${dir%%/*}
      local path=${dir##*/}
      local baseName=$(basename  "$1")
      local ext="${baseName##*.}"
      local resource="${baseName%.*}"
      # json stored as XDM map or array
      local Uri="http://${domain}/${path}/${resource}" 
      local srcFile=src/data/${domain}/${path}/${resource}.xml
      local xqFile=/tmp/${domain}/${path}/${resource}.xml
      cat $1 | \
      docker run --rm  --interactive \
      docker.pkg.github.com/grantmacken/alpine-cmark/cmark:$CMARK_VER \
      --to xml | \
      sed -e '1,2d' > $srcFile
      docker exec xq xqerl escript bin/scripts/insert-doc.escript $Uri $xqFile
      rm -f $srcFile
      ;;
  *)
    die "[ ${args[1]} ] unknown extension"
esac
}

function dbDeleteItem() {
  local resource="http://$(echo $1 | grep -oP '^(http://)?\K(.+)$')"
  if "$( isDocAvailable $resource )"
  then
    docker exec xq xqerl escript bin/scripts/query.escript  "'$resource' => db:delete()"
  else 
    local collection=$(dirname $resource)
    if [ -n "$(dbList $collection | grep -oP "^${resource}$")" ]
      then
      docker exec xq xqerl escript bin/scripts/query.escript  "'$resource' => db:delete()" &>/dev/null
      ok "resource deleted from db: [ $resource ]"
    else
      die "resource NOT found in db: [ $resource ]"
    fi
  fi
}

function dbDeleteCollection() { 
 echo 'TODO'
}

function dbLink() { 
  #xqerl_update:add(Ctx, {put, link, Filename, DB, Name}).
 echo 'TODO'
}

function doCompile() { 
  local base="$(echo $1 | grep -oP '^(src/(main_modules|library_modules)/)?\K(.+)$')"
  if [ -e src/main_modules/$base ] ;then  
   docker cp src/main_modules/$base xq:/usr/local/xqerl/code/src/$base 
  else 
    if [ -e src/library_modules/$base ] ; then
      docker cp src/library_modules/$base xq:/usr/local/xqerl/code/src/$base 
    else die "[ $1 ] unknown file"
    fi
  fi
  docker exec xq xqerl escript bin/scripts/compile.escript  "code/src/$base"
}

function doRun() { 
  local base="$(echo $1 | grep -oP '^(src/main_modules/)?\K(.+)$')"
  local srcFile="src/main_modules/$base"
  [ -e $srcFile ] || die "[ $srcFile ] unknown file"
  docker cp $srcFile xq:/usr/local/xqerl/code/src/$base 
  docker exec xq xqerl escript bin/scripts/run.escript  $1 "$2"
}

case "${args[0]}" in
    domain) ## {domain} check if domain exists in db. example: `xq db-exists example.com` 
    dbDomainExists ${args[1]}
    ;;
  list) ## {domain/path} list resources. example: `xq list example.com/static-assets`
    dbList ${args[1]}
    ;;
  get) ## {domain}/{path} retrieve and serialize resource . example: `xq get example.com/static-assets/icons/article.svg`
    dbGetItem ${args[1]}
    ;;
  put) ## {domain}/{path} create xdm item from file. example: `xq put example.com`
   dbFilePut ${args[1]}
   ;;
  #type) TODO {domain}/{path} get xdm type. example: `xdm item-type example.com/static-assets/icons/article.svg`
  # dbItemType ${args[1]}
  # ;;
  #put-raw) # {domain}/{path} put unparsed txt file into db`
   # dbRawTextPut ${args[1]}
   # note: there is no conversion to XDM item. 
   # note: json will remain as unparsed json unlike `put` which
   # note: will create out the origin an XDM item (map or array) 
   # note: and put into the the db
   # note: csv  will remain as unparsed csv  
   # note: `$href  => unparsed-text()`
   # note: `$href  => unparsed-text-lines()`
   # note: `$href  => json-doc()`
  # ;;
 #put-asset) # {domain}/{path} link to preprocessed binary asset` example:` xq put-asset example.com/icons/article.svg`
   # note: example:` xq asset {domain}/assets/icons/article.svg`
   # note: This is preprocessing pipeline, where the src origin is piped thru docker container instances to get a 
   # note: required processed asset result.
   # note. This asset result is stored in docker **static-assets** volume,
   # note: and a db link is created in the db to the asset item.
   # note: on xqerl container the `./priv/static` dir is used.
   # in erlang `priv` - Used for application specific files
   # erlang cowboy uses `priv/static` for sering static asset files
  # ;;
 delete) ## {domain}/{path} delete resource from db. example: `xq delete example.com/static-assets/icons/article.svg`
   dbDeleteItem "${args[1]}"
   ;;
  # xQuery actions [ query | compile | run ] 
  # ========================================
  query) ## {xquery-string} run a simple xQuery. example: `xq query "current-date() => string()"`
    docker exec xq xqerl escript bin/scripts/query.escript  "${args[1]}"
    ;;
  compile) ## {path} xQuery module. example: `xq compile src/main_modules/put-item.xq`
    doCompile "${args[1]}"
    ;;
  run) ## {main-module-name}.xq run xQuery with external arg. example: `xq run turtles.xq turtles`
    doRun  "${args[1]}" "${args[2]}"

    ;;
 call) ## {module} {function} {arg} call available xqerl module functions. example: `xq call xqldb_db_server exists http://example.com
    doCall ${args[1]} ${args[2]} ${args[3]}
    ;;
 eval) ## {eval-string} evaluate available xqerl erlang expressions: `xdm eval 'calendar:local_time().'
    docker exec xq xqerl eval "${args[1]}"  
    ;;
 sh)  ## {cmd-string} run alpine buzybox shell commands: `xq sh 'date -I'
      docker exec xq /bin/sh -c "${args[1]}"
      ;;
  *)
    die "[ ${args[0]} ] unknown verb - try [ list ]"
esac



